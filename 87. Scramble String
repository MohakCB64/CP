class Solution {
public:
    unordered_map<string,bool>m;
    bool solve( string a, string b){
         string key=a;
        key.push_back(' ');
        key.append(b);
        if(m.find(key)!=m.end())
            return m[key];
        if(a.compare(b)==0)
            return m[key]=true;
        
        if(a.length()<=1 || b.length()<=1)
            return m[key]=false;
       
        bool flag=false;
        int n=a.length();
        for(int i=1;i<n;i++){
            bool condition1 = (solve(a.substr(0,i),b.substr(n-i,i))&&solve(a.substr(i,n-i),b.substr(0,n-i)));
            
             bool condition2 = (solve(a.substr(0,i),b.substr(0,i))&&solve(a.substr(i,n-i),b.substr(i,n-i)));
            
            if(condition1 || condition2){
                flag=true;
                break;
            }
        }
        
        return m[key]=flag;
    }
    
    bool isScramble(string s1, string s2) {
        return solve(s1,s2);
    }
};
